/// Swaps the values of two mutable references.
fn swap(a: &mut i32, b: &mut i32) {
    let temp;
    temp = *a;
    *a = *b;
    *b = temp;
}

fn euclidean(mut a: i32, mut b: i32) {
    let mut r;
    let mut q;
    let mut second_last_dividend: i32 = 0;
    let mut second_last_reminder: i32 = 0;

    r = a % b;
    q = a / b;
    
    let mut r = -1;

    while r != 0 {
        if a < b {
            swap(&mut a, &mut b);
        }

        r = a % b;

        if r == 0 {
            second_last_dividend = a;
            second_last_reminder = b;
            println!("{}", b);
        } else {
            a = b;
            b = r;
        }
    }
    println!("{} {}", second_last_dividend, second_last_reminder);
    extended_euclidean(second_last_dividend, second_last_reminder);
}

fn extended_euclidean(mut a: i32, mut b: i32){
    let mut temp;
    let mut p;
    let mut q;
    let mut divisor;
    p = 1;
    q = 1;
    temp = a+b;

    if temp == a - b {
        divisor_p = temp / a;
    }

    println!("{} {} {}", temp, a, b)
}

fn main(){
    let x: i32 = 1398;
    let y: i32 = 324;
    euclidean(x,y);
}